{"version":3,"sources":["Header.js","MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","MemeGenerator","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","takeScreenShot","_this2","html2canvas","document","querySelector","useCORS","allowTaint","then","canvas","getElementById","src","toDataURL","setState","topText","bottomText","downloadImg","state","selectImg","allMemes","handleChange","bind","assertThisInitialized","handleDownload","handleReset","_this3","script","async","body","appendChild","fetch","response","json","memes","data","event","_event$target","target","name","value","defineProperty","console","log","location","reload","setAttribute","RenderMemes","map","item","url","classname","type","placeholder","onChange","onClick","href","download","id","className","alt","height","React","Component","App","src_Header","src_MemeGenerator","Boolean","window","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8NAUeA,MARf,WACE,OACEC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,+FCgISC,cAjIb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAoDFI,eAAiB,WAAW,IAAAC,EAAAL,KAC1BM,IAAYC,SAASC,cAAc,YAAa,CAC9CC,SAAS,EACTC,YAAY,IACXC,KAAK,SAAAC,GAENL,SAASM,eAAe,cAAcC,IAAMF,EAAOG,YAEnDV,EAAKW,SAAS,CACZC,QAAS,GACTC,WAAY,GACZC,YAAaP,EAAOG,iBA9DxBlB,EAAKuB,MAAQ,CACXH,QAAS,GACTC,WAAY,GACZG,UAAW,mCACXC,SAAU,GACVH,YAAa,IAEftB,EAAK0B,aAAe1B,EAAK0B,aAAaC,KAAlB1B,OAAA2B,EAAA,EAAA3B,CAAAD,IACpBA,EAAKO,eAAiBP,EAAKO,eAAeoB,KAApB1B,OAAA2B,EAAA,EAAA3B,CAAAD,IACtBA,EAAK6B,eAAiB7B,EAAK6B,eAAeF,KAApB1B,OAAA2B,EAAA,EAAA3B,CAAAD,IACtBA,EAAK8B,YAAc9B,EAAK8B,YAAYH,KAAjB1B,OAAA2B,EAAA,EAAA3B,CAAAD,IAZPA,mFAeM,IAAA+B,EAAA5B,KACZ6B,EAAStB,SAASZ,cAAc,UACtCkC,EAAOf,IACL,8EACFe,EAAOC,OAAQ,EACfvB,SAASwB,KAAKC,YAAYH,GAE1BI,MAAM,qCACHtB,KAAK,SAAAuB,GAAQ,OAAIA,EAASC,SAC1BxB,KAAK,SAAAuB,GAAY,IACRE,EAAUF,EAASG,KAAnBD,MACRR,EAAKZ,SAAS,CACZM,SAAU,CAAEc,kDAMPE,GAAO,IAAAC,EACMD,EAAME,OAAtBC,EADUF,EACVE,KAAMC,EADIH,EACJG,MACd1C,KAAKgB,SAALlB,OAAA6C,EAAA,EAAA7C,CAAA,GACG2C,EAAOC,0CAKVE,QAAQC,IAAI,MACZtC,SAASuC,SAASC,kDAIS,KAA3B/C,KAAKoB,MAAMD,YACPZ,SAASM,eAAe,uBAAuBmC,aAAa,OAAQ,KACpEzC,SACGM,eAAe,uBACfmC,aAAa,OAAQhD,KAAKoB,MAAMD,8CAoBvC,IAAI8B,EAAc,GAOlB,OANIjD,KAAKoB,MAAME,SAASc,QACtBa,EAAcjD,KAAKoB,MAAME,SAASc,MAAMc,IAAI,SAASC,GACnD,OAAO1D,EAAAC,EAAAC,cAAA,UAAQ+C,MAAOS,EAAKC,KAAMD,EAAKV,SAKxChD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAM0D,UAAU,aACd5D,EAAAC,EAAAC,cAAA,SACE2D,KAAK,OACLb,KAAK,UACLC,MAAO1C,KAAKoB,MAAMH,QAClBsC,YAAY,UACZC,SAAUxD,KAAKuB,eAEjB9B,EAAAC,EAAAC,cAAA,SACE2D,KAAK,OACLb,KAAK,aACLc,YAAY,cACZb,MAAO1C,KAAKoB,MAAMF,WAClBsC,SAAUxD,KAAKuB,eAEjB9B,EAAAC,EAAAC,cAAA,UACE+C,MAAO1C,KAAKoB,MAAMC,UAClBmC,SAAUxD,KAAKuB,aACfkB,KAAK,aAEJQ,IAKLxD,EAAAC,EAAAC,cAAA,UAAQ8D,QAASzD,KAAK2B,aAAtB,SAEAlC,EAAAC,EAAAC,cAAA,KAAG+D,MAAI,EAACC,UAAQ,EAACC,GAAG,uBAClBnE,EAAAC,EAAAC,cAAA,UAAQ8D,QAASzD,KAAK0B,gBAAtB,aAGFjC,EAAAC,EAAAC,cAAA,UAAQ8D,QAASzD,KAAKI,gBAAtB,UAEAX,EAAAC,EAAAC,cAAA,OAAK0D,UAAU,QACb5D,EAAAC,EAAAC,cAAA,OAAKiE,GAAG,WACNnE,EAAAC,EAAAC,cAAA,MAAIkE,UAAU,OAAO7D,KAAKoB,MAAMH,SAChCxB,EAAAC,EAAAC,cAAA,MAAIkE,UAAU,UAAU7D,KAAKoB,MAAMF,YACnCzB,EAAAC,EAAAC,cAAA,OACEiE,GAAG,aACH9C,IAAKd,KAAKoB,MAAMC,UAChByC,IAAI,GACJC,OAAO,oBAzHOC,IAAMC,WCWnBC,MATf,WACE,OACEzE,EAAAC,EAAAC,cAAA,OAAKkE,UAAU,OACbpE,EAAAC,EAAAC,cAACwE,EAAD,MACA1E,EAAAC,EAAAC,cAACyE,EAAD,QCGcC,QACW,cAA7BC,OAAOxB,SAASyB,UAEe,UAA7BD,OAAOxB,SAASyB,UAEhBD,OAAOxB,SAASyB,SAASC,MACvB,2DCZNC,IAASC,OAAOjF,EAAAC,EAAAC,cAACgF,EAAD,MAASpE,SAASM,eAAe,SD2H3C,kBAAmB+D,WACrBA,UAAUC,cAAcC,MAAMnE,KAAK,SAAAoE,GACjCA,EAAaC","file":"static/js/main.85105815.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header>\r\n      <p>MEME GENERATOR</p>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport html2canvas from \"html2canvas\";\r\n\r\nclass MemeGenerator extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      topText: \"\",\r\n      bottomText: \"\",\r\n      selectImg: \"https://i.imgflip.com/1ur9b0.jpg\",\r\n      allMemes: [],\r\n      downloadImg: \"\"\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.takeScreenShot = this.takeScreenShot.bind(this);\r\n    this.handleDownload = this.handleDownload.bind(this);\r\n    this.handleReset = this.handleReset.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const script = document.createElement(\"script\");\r\n    script.src =\r\n      \"https://cdnjs.cloudflare.com/ajax/libs/html2canvas/0.4.1/html2canvas.min.js\";\r\n    script.async = true;\r\n    document.body.appendChild(script);\r\n\r\n    fetch(\"https://api.imgflip.com/get_memes\")\r\n      .then(response => response.json())\r\n      .then(response => {\r\n        const { memes } = response.data;\r\n        this.setState({\r\n          allMemes: { memes }\r\n        });\r\n        // console.log(this.state.allMemes.memes);\r\n      });\r\n  }\r\n\r\n  handleChange(event) {\r\n    const { name, value } = event.target;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  handleReset() {\r\n    console.log(\"Hi\");\r\n    document.location.reload();\r\n  }\r\n\r\n  handleDownload() {\r\n    this.state.downloadImg === \"\"\r\n      ? document.getElementById(\"download-meme-image\").setAttribute(\"href\", \"#\")\r\n      : document\r\n          .getElementById(\"download-meme-image\")\r\n          .setAttribute(\"href\", this.state.downloadImg);\r\n  }\r\n\r\n  takeScreenShot = function() {\r\n    html2canvas(document.querySelector(\"#capture\"), {\r\n      useCORS: true,\r\n      allowTaint: true\r\n    }).then(canvas => {\r\n      // document.body.appendChild(canvas);\r\n      document.getElementById(\"meme-image\").src = canvas.toDataURL();\r\n\r\n      this.setState({\r\n        topText: \"\",\r\n        bottomText: \"\",\r\n        downloadImg: canvas.toDataURL()\r\n      });\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let RenderMemes = \"\";\r\n    if (this.state.allMemes.memes) {\r\n      RenderMemes = this.state.allMemes.memes.map(function(item) {\r\n        return <option value={item.url}>{item.name}</option>;\r\n      });\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <form classname=\"meme-form\">\r\n          <input\r\n            type=\"text\"\r\n            name=\"topText\"\r\n            value={this.state.topText}\r\n            placeholder=\"TopText\"\r\n            onChange={this.handleChange}\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            name=\"bottomText\"\r\n            placeholder=\"Bottom Text\"\r\n            value={this.state.bottomText}\r\n            onChange={this.handleChange}\r\n          />\r\n          <select\r\n            value={this.state.selectImg}\r\n            onChange={this.handleChange}\r\n            name=\"selectImg\"\r\n          >\r\n            {RenderMemes}\r\n          </select>\r\n          {/* {console.log(this.state.selectImg)} */}\r\n        </form>\r\n\r\n        <button onClick={this.handleReset}>Reset</button>\r\n\r\n        <a href download id=\"download-meme-image\">\r\n          <button onClick={this.handleDownload}>Download</button>\r\n        </a>\r\n\r\n        <button onClick={this.takeScreenShot}>Submit</button>\r\n\r\n        <div classname=\"meme\">\r\n          <div id=\"capture\">\r\n            <h2 className=\"top\">{this.state.topText}</h2>\r\n            <h2 className=\"bottom\">{this.state.bottomText}</h2>\r\n            <img\r\n              id=\"meme-image\"\r\n              src={this.state.selectImg}\r\n              alt=\"\"\r\n              height=\"400px\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MemeGenerator;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport MemeGenerator from \"./MemeGenerator\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MemeGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}